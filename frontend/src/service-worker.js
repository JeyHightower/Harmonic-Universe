import { openDB } from 'idb';
import { BackgroundSyncPlugin } from 'workbox-background-sync';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';

// Precache all assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// Cache for API responses
const API_CACHE = 'api-cache-v1';
const NOTIFICATION_SYNC_QUEUE = 'notification-sync-queue';

// Open IndexedDB
const dbPromise = openDB('harmonic-universe-db', 1, {
  upgrade(db) {
    // Notifications store
    if (!db.objectStoreNames.contains('notifications')) {
      const store = db.createObjectStore('notifications', {
        keyPath: 'id',
        autoIncrement: true,
      });
      store.createIndex('timestamp', 'timestamp');
      store.createIndex('read', 'read');
    }

    // Offline actions queue store
    if (!db.objectStoreNames.contains('offlineActions')) {
      const store = db.createObjectStore('offlineActions', {
        keyPath: 'id',
        autoIncrement: true,
      });
      store.createIndex('timestamp', 'timestamp');
      store.createIndex('type', 'type');
    }
  },
});

// Background sync for notifications
const notificationsSyncPlugin = new BackgroundSyncPlugin(
  NOTIFICATION_SYNC_QUEUE,
  {
    maxRetentionTime: 24 * 60, // Retry for up to 24 hours
    onSync: async ({ queue }) => {
      let entry;
      while ((entry = await queue.shiftRequest())) {
        try {
          await fetch(entry.request.clone());

          // Update IndexedDB status
          const db = await dbPromise;
          const tx = db.transaction('offlineActions', 'readwrite');
          await tx.store.delete(entry.id);
        } catch (error) {
          await queue.unshiftRequest(entry);
          throw error;
        }
      }
    },
  }
);

// Cache static assets
registerRoute(
  ({ request }) =>
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'font',
  new CacheFirst({
    cacheName: 'static-assets',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
        maxEntries: 60,
      }),
    ],
  })
);

// Cache images
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
        maxEntries: 100,
      }),
    ],
  })
);

// Cache API responses
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: API_CACHE,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60, // 1 hour
      }),
    ],
  })
);

// Handle offline notifications
self.addEventListener('fetch', event => {
  if (event.request.url.includes('/api/notifications')) {
    event.respondWith(
      (async () => {
        try {
          // Try network first
          const response = await fetch(event.request);

          // Cache successful GET responses
          if (event.request.method === 'GET' && response.ok) {
            const cache = await caches.open(API_CACHE);
            cache.put(event.request, response.clone());
          }

          return response;
        } catch (error) {
          // If offline, try to return cached response
          if (event.request.method === 'GET') {
            const cache = await caches.open(API_CACHE);
            const cachedResponse = await cache.match(event.request);
            if (cachedResponse) return cachedResponse;
          }

          // For POST/PUT/DELETE requests, store in IndexedDB for later sync
          if (['POST', 'PUT', 'DELETE'].includes(event.request.method)) {
            const db = await dbPromise;
            await db.add('offlineActions', {
              timestamp: Date.now(),
              type: 'notification',
              request: {
                url: event.request.url,
                method: event.request.method,
                body: await event.request.clone().text(),
                headers: Array.from(event.request.headers.entries()),
              },
            });

            return new Response(
              JSON.stringify({
                status: 'queued',
                message: 'Action will be processed when online',
              }),
              {
                status: 202,
                headers: { 'Content-Type': 'application/json' },
              }
            );
          }

          throw error;
        }
      })()
    );
  }
});

// Listen for sync events
self.addEventListener('sync', event => {
  if (event.tag === NOTIFICATION_SYNC_QUEUE) {
    event.waitUntil(notificationsSyncPlugin.onSync({ queue: event.tag }));
  }
});

// Listen for push notifications
self.addEventListener('push', event => {
  if (event.data) {
    const data = event.data.json();

    event.waitUntil(
      self.registration.showNotification(data.title, {
        body: data.message,
        icon: '/icon-192x192.png',
        badge: '/badge-72x72.png',
        data: data,
      })
    );
  }
});

// Handle notification clicks
self.addEventListener('notificationclick', event => {
  event.notification.close();

  event.waitUntil(
    clients.matchAll({ type: 'window' }).then(clientList => {
      for (const client of clientList) {
        if (client.url === '/' && 'focus' in client) {
          return client.focus();
        }
      }
      if (clients.openWindow) {
        return clients.openWindow('/');
      }
    })
  );
});
