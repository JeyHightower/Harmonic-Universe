services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - '5000:5000'
    volumes:
      - ./backend:/app/backend
      - ./backend/uploads:/app/backend/uploads
      - ./backend/logs:/app/backend/logs
    env_file:
      - .env.docker
    command: >
      sh -c "while ! nc -z db 5432; do
               echo 'Waiting for database to be ready...'
               sleep 2
             done &&
             cd /app/backend &&
             if [ ! -d migrations ]; then
               flask db init
             fi &&
             flask db migrate -m 'Initial migration' &&
             flask db upgrade &&
             flask run --host=0.0.0.0"
    depends_on:
      - db
      - redis
    networks:
      - harmonic_network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5000/health']
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:5000
      - VITE_WS_URL=ws://localhost:5000/ws
    depends_on:
      - backend
    networks:
      - harmonic_network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000']
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:13-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env.docker
    ports:
      - '5432:5432'
    networks:
      - harmonic_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - harmonic_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.celery worker --loglevel=info
    volumes:
      - ./backend:/app/backend
    env_file:
      - .env.docker
    environment:
      - PYTHONPATH=/app/backend
    depends_on:
      - redis
      - backend
    networks:
      - harmonic_network

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.celery beat --loglevel=info
    volumes:
      - ./backend:/app/backend
    env_file:
      - .env.docker
    environment:
      - PYTHONPATH=/app/backend
    depends_on:
      - redis
      - backend
    networks:
      - harmonic_network

  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.celery flower --port=5555
    ports:
      - '5555:5555'
    volumes:
      - ./backend:/app/backend
    env_file:
      - .env.docker
    environment:
      - PYTHONPATH=/app/backend
    depends_on:
      - redis
      - backend
      - celery
    networks:
      - harmonic_network

volumes:
  postgres_data:
  redis_data:

networks:
  harmonic_network:
    driver: bridge
