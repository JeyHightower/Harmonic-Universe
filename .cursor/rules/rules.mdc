---
description:
globs:
alwaysApply: true
---
# Project Guidelines and Best Practices

## General Rules

1. **Directory Management**
   - Always run `pwd` to confirm your current directory before executing terminal commands.
   - Verify your directory to avoid creating nested directories.

2. **Planning and Execution**
   - Create a logical plan before starting any tasks. Break it down into clear, actionable steps.
   - Follow best practices for all tasks.

3. **Codebase Integrity**
   - Do not rush to add new code or files. Search the entire codebase before making changes to avoid clutter.
   - Ensure consistency in naming, URLs, variables, routes, and APIs when fixing errors. Review other files for organization.

4. **File Structure and Naming Conventions**
   - Maintain a logical and consistent file structure for both the backend and frontend.
   - Use simple and direct names for files and directories. Avoid complex or vague terms.
   - Ensure that the naming of files and directories clearly reflects their purpose and functionality.
   - Organize files in a way that makes it easy to navigate and understand the project structure.

5. **Error Handling**
   - Investigate the root cause of any error or issue before attempting to resolve it.
   - For frontend issues, always use Redux for implementation whenever possible. If Redux can be utilized, remove any conflicting code that does not use Redux while ensuring that the same functionality is maintained.
   - For backend issues, maintain consistency with files in:
     - `harmonic-universe/backend/app/api/models/**/*`
     - `harmonic-universe/backend/app/api/routes/**/*`
   - Check other features (universe management, scene management, character management, notes management) for similar errors. Trace data flow to identify and address the root cause of issues.
   - Follow the stack trace and analyze the files listed to identify the root cause of the error, ensuring a thorough understanding before implementing a fix.

6. **Codebase Modifications**
   - Do not create new files or code. If something is needed, search for it and update the import instead.
   - There is no need to start or restart servers; they are already running with hot reloading (backend on port 5001 and frontend on port 5173).

## Core Principles

1. **Exploration Over Conclusion**
   - Avoid rushing to conclusions; keep exploring until a solution is found.
   - Question every assumption and inference until clarity is achieved.

2. **Depth of Reasoning**
   - Break down complex thoughts into simple, atomic steps.
   - Embrace uncertainty and be open to revising previous thoughts.

3. **Thinking Process**
   - Use short, simple sentences that reflect natural thought patterns.
   - Express uncertainty and internal debate, showing your thought process.
   - Acknowledge and explore dead ends; backtrack and revise as necessary.
   - Generate at least two alternative solutions for problem-solving.

4. **Persistence**
   - Value thorough exploration over quick resolutions.

## Output Format

Your responses must follow this exact structure:

<contemplator>
[Your extensive internal monologue goes here]
- Perform breadth and depth traversal of the entire codebase to understand file structure and overall features of the application/program.
- Read files in:
  - `harmonic-universe/backend/**/*`
  - `harmonic-universe/frontend/**/*`
- Develop a logical and methodical plan of action and execute that plan efficiently.
- Begin with small, foundational observations.
- Question each step thoroughly.
- Show natural thought progression.
- Express doubts and uncertainties.
- Revise and backtrack if needed.
- Continue until a natural resolution is reached.
- Never rush to create new files or code.
- Always perform tasks in the most logical order.
- Always search the codebase thoroughly before adding new files or code.
- Always verify the current directory before giving terminal commands to ensure a clean codebase.
- Always verify after every task is complete.
</contemplator>

<implementor>
Always run commands in the workspace.
</implementor>
