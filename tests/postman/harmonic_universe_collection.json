{
  "info": {
    "_postman_id": "harmonic-universe-api",
    "name": "Harmonic Universe API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "API collection for Harmonic Universe"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://127.0.0.1:5001",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Signup",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const timestamp = new Date().getTime();",
                  "pm.environment.set('testUsername', 'testuser_' + timestamp);",
                  "pm.environment.set('testEmail', 'test' + timestamp + '@example.com');",
                  "pm.environment.set('testPassword', 'Test123!');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response has token', function() {",
                  "    pm.expect(responseData.token).to.exist;",
                  "});",
                  "",
                  "if (responseData.token) {",
                  "    pm.environment.set('authToken', responseData.token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{testUsername}}\",\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/signup",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "signup"]
            }
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response has token', function() {",
                  "    pm.expect(responseData.token).to.exist;",
                  "});",
                  "",
                  "if (responseData.token) {",
                  "    pm.environment.set('authToken', responseData.token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Get Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response has token', function() {",
                  "    pm.expect(responseData.token).to.exist;",
                  "});",
                  "",
                  "if (responseData.token) {",
                  "    pm.environment.set('authToken', responseData.token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/token",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "token"]
            }
          }
        },
        {
          "name": "Validate Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Token is valid', function() {",
                  "    pm.expect(responseData.valid).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/validate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "validate"]
            }
          }
        },
        {
          "name": "Update User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"updated_{{testUsername}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/user",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "user"]
            }
          }
        },
        {
          "name": "Delete User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/user",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "user"]
            }
          }
        }
      ]
    },
    {
      "name": "Universe Management",
      "item": [
        {
          "name": "Create Universe",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const timestamp = new Date().getTime();",
                  "pm.environment.set('universeName', 'Universe_' + timestamp);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "console.log('Response data:', responseData);",
                  "",
                  "pm.test('Response has universe data', function() {",
                  "    pm.expect(responseData.universe).to.exist;",
                  "    pm.expect(responseData.universe.id).to.exist;",
                  "});",
                  "",
                  "if (responseData.universe && responseData.universe.id) {",
                  "    const universeId = responseData.universe.id.toString();",
                  "    pm.environment.set('universeId', universeId);",
                  "    console.log('Set universeId:', universeId);",
                  "    console.log('Environment variables:', pm.environment.toObject());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{universeName}}\",\n  \"description\": \"A test universe\",\n  \"gravity_constant\": 9.81,\n  \"environment_harmony\": 0.75\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/universes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "universes"]
            }
          }
        },
        {
          "name": "Get Universes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response is an array of universes', function() {",
                  "    pm.expect(responseData).to.be.an('array');",
                  "    if (responseData.length > 0) {",
                  "        pm.expect(responseData[0]).to.have.all.keys('id', 'name', 'description', 'gravity_constant', 'environment_harmony', 'creator_id');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/universes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "universes"]
            }
          }
        },
        {
          "name": "Get Universe",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "console.log('Current universeId:', pm.environment.get('universeId'));",
                  "console.log('Request URL:', pm.request.url.toString());",
                  "console.log('Full request:', {",
                  "    method: pm.request.method,",
                  "    url: pm.request.url.toString(),",
                  "    headers: pm.request.headers,",
                  "    body: pm.request.body",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response has universe data', function() {",
                  "    pm.expect(responseData).to.be.an('object');",
                  "    pm.expect(responseData.id).to.exist;",
                  "    pm.expect(responseData.name).to.exist;",
                  "    pm.expect(responseData.description).to.exist;",
                  "    pm.expect(responseData.gravity_constant).to.be.a('number');",
                  "    pm.expect(responseData.environment_harmony).to.be.within(0, 1);",
                  "    pm.expect(responseData.creator_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/universes/:universeId",
              "host": ["{{baseUrl}}"],
              "path": ["api", "universes", ":universeId"],
              "variable": [
                {
                  "key": "universeId",
                  "value": "{{universeId}}"
                }
              ]
            }
          }
        },
        {
          "name": "Update Universe",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response has updated universe data', function() {",
                  "    pm.expect(responseData.universe).to.exist;",
                  "    pm.expect(responseData.universe.name).to.include('Updated');",
                  "    pm.expect(responseData.universe.gravity_constant).to.equal(10.0);",
                  "    pm.expect(responseData.universe.environment_harmony).to.equal(0.8);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated {{universeName}}\",\n  \"description\": \"An updated test universe\",\n  \"gravity_constant\": 10.0,\n  \"environment_harmony\": 0.8\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "universes", "{{universeId}}"]
            }
          }
        },
        {
          "name": "Delete Universe",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "universes", "{{universeId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Physics Parameters",
      "item": [
        {
          "name": "Add Physics Parameter",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const timestamp = new Date().getTime();",
                  "pm.environment.set('physicsParamName', 'PhysicsParam_' + timestamp);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response has parameter data', function() {",
                  "    pm.expect(responseData.parameter).to.exist;",
                  "    pm.expect(responseData.parameter.id).to.exist;",
                  "});",
                  "",
                  "if (responseData.parameter && responseData.parameter.id) {",
                  "    pm.environment.set('physicsParamId', responseData.parameter.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"parameter_name\": \"{{physicsParamName}}\",\n  \"value\": 42.0,\n  \"unit\": \"m/s²\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}/physics/",
              "host": ["{{baseUrl}}"],
              "path": ["api", "universes", "{{universeId}}", "physics", ""]
            }
          }
        },
        {
          "name": "Get Physics Parameters",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response has parameters array', function() {",
                  "    pm.expect(responseData.parameters).to.be.an('array');",
                  "    if (responseData.parameters.length > 0) {",
                  "        pm.expect(responseData.parameters[0]).to.have.all.keys('id', 'parameter_name', 'value', 'unit');",
                  "        pm.expect(responseData.parameters[0].value).to.be.a('number');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}/physics/",
              "host": ["{{baseUrl}}"],
              "path": ["api", "universes", "{{universeId}}", "physics", ""]
            }
          }
        },
        {
          "name": "Update Physics Parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response has updated parameter data', function() {",
                  "    pm.expect(responseData.parameter).to.exist;",
                  "    pm.expect(responseData.parameter.parameter_name).to.include('Updated');",
                  "    pm.expect(responseData.parameter.value).to.equal(45.0);",
                  "    pm.expect(responseData.parameter.unit).to.equal('m/s²');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"parameter_name\": \"Updated {{physicsParamName}}\",\n  \"value\": 45.0,\n  \"unit\": \"m/s²\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}/physics/{{physicsParamId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "api",
                "universes",
                "{{universeId}}",
                "physics",
                "{{physicsParamId}}"
              ]
            }
          }
        },
        {
          "name": "Delete Physics Parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}/physics/{{physicsParamId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "api",
                "universes",
                "{{universeId}}",
                "physics",
                "{{physicsParamId}}"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Music Parameters",
      "item": [
        {
          "name": "Add Music Parameter",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const timestamp = new Date().getTime();",
                  "pm.environment.set('musicParamName', 'MusicParam_' + timestamp);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response has parameter data', function() {",
                  "    pm.expect(responseData.parameter).to.exist;",
                  "    pm.expect(responseData.parameter.id).to.exist;",
                  "});",
                  "",
                  "if (responseData.parameter && responseData.parameter.id) {",
                  "    pm.environment.set('musicParamId', responseData.parameter.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"parameter_name\": \"{{musicParamName}}\",\n  \"value\": 440.0,\n  \"instrument\": \"piano\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}/music/",
              "host": ["{{baseUrl}}"],
              "path": ["api", "universes", "{{universeId}}", "music", ""]
            }
          }
        },
        {
          "name": "Get Music Parameters",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response is an array of music parameters', function() {",
                  "    pm.expect(responseData).to.be.an('array');",
                  "    if (responseData.length > 0) {",
                  "        pm.expect(responseData[0]).to.have.all.keys('id', 'parameter_name', 'value', 'instrument');",
                  "        pm.expect(responseData[0].value).to.be.a('number');",
                  "        pm.expect(responseData[0].instrument).to.be.a('string');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}/music/",
              "host": ["{{baseUrl}}"],
              "path": ["api", "universes", "{{universeId}}", "music", ""]
            }
          }
        },
        {
          "name": "Update Music Parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response has updated parameter data', function() {",
                  "    pm.expect(responseData.parameter).to.exist;",
                  "    pm.expect(responseData.parameter.parameter_name).to.include('Updated');",
                  "    pm.expect(responseData.parameter.value).to.equal(442.0);",
                  "    pm.expect(responseData.parameter.instrument).to.equal('violin');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"parameter_name\": \"Updated {{musicParamName}}\",\n  \"value\": 442.0,\n  \"instrument\": \"violin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}/music/{{musicParamId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "api",
                "universes",
                "{{universeId}}",
                "music",
                "{{musicParamId}}"
              ]
            }
          }
        },
        {
          "name": "Delete Music Parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}/music/{{musicParamId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "api",
                "universes",
                "{{universeId}}",
                "music",
                "{{musicParamId}}"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Storyboard",
      "item": [
        {
          "name": "Add Plot Point",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const timestamp = new Date().getTime();",
                  "pm.environment.set('plotPointName', 'PlotPoint_' + timestamp);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response has storyboard data', function() {",
                  "    pm.expect(responseData.storyboard).to.exist;",
                  "    pm.expect(responseData.storyboard.id).to.exist;",
                  "});",
                  "",
                  "if (responseData.storyboard && responseData.storyboard.id) {",
                  "    pm.environment.set('storyboardId', responseData.storyboard.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"plot_point\": \"{{plotPointName}}\",\n  \"description\": \"A test plot point\",\n  \"harmony_tie\": 0.75\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}/storyboard/",
              "host": ["{{baseUrl}}"],
              "path": ["api", "universes", "{{universeId}}", "storyboard", ""]
            }
          }
        },
        {
          "name": "Get Plot Points",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response has storyboards array', function() {",
                  "    pm.expect(responseData.storyboards).to.be.an('array');",
                  "    if (responseData.storyboards.length > 0) {",
                  "        pm.expect(responseData.storyboards[0]).to.have.all.keys('id', 'plot_point', 'description', 'harmony_tie', 'created_at', 'updated_at', 'universe_id');",
                  "        pm.expect(responseData.storyboards[0].harmony_tie).to.be.within(0, 1);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}/storyboard/",
              "host": ["{{baseUrl}}"],
              "path": ["api", "universes", "{{universeId}}", "storyboard", ""]
            }
          }
        },
        {
          "name": "Get Plot Points with Filters",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response has filtered storyboards', function() {",
                  "    pm.expect(responseData.storyboards).to.be.an('array');",
                  "    pm.expect(responseData.pagination).to.exist;",
                  "    pm.expect(responseData.filters).to.exist;",
                  "    pm.expect(responseData.pagination).to.have.all.keys('page', 'per_page', 'total_pages', 'total_items');",
                  "    pm.expect(responseData.filters).to.have.all.keys('harmony_min', 'harmony_max', 'sort_by', 'order');",
                  "    if (responseData.storyboards.length > 0) {",
                  "        pm.expect(responseData.storyboards[0].harmony_tie).to.be.within(0.5, 1.0);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}/storyboard/?page=1&per_page=10&sort_by=harmony_tie&order=desc&harmony_min=0.5&harmony_max=1.0",
              "host": ["{{baseUrl}}"],
              "path": ["api", "universes", "{{universeId}}", "storyboard", ""],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "10"
                },
                {
                  "key": "sort_by",
                  "value": "harmony_tie"
                },
                {
                  "key": "order",
                  "value": "desc"
                },
                {
                  "key": "harmony_min",
                  "value": "0.5"
                },
                {
                  "key": "harmony_max",
                  "value": "1.0"
                }
              ]
            }
          }
        },
        {
          "name": "Update Plot Point",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const responseData = pm.response.json();",
                  "pm.test('Response has updated storyboard data', function() {",
                  "    pm.expect(responseData.storyboard).to.exist;",
                  "    pm.expect(responseData.storyboard.plot_point).to.include('Updated');",
                  "    pm.expect(responseData.storyboard.description).to.include('updated');",
                  "    pm.expect(responseData.storyboard.harmony_tie).to.equal(0.8);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"plot_point\": \"Updated {{plotPointName}}\",\n  \"description\": \"An updated test plot point\",\n  \"harmony_tie\": 0.8\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}/storyboard/{{storyboardId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "api",
                "universes",
                "{{universeId}}",
                "storyboard",
                "{{storyboardId}}"
              ]
            }
          }
        },
        {
          "name": "Delete Plot Point",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/universes/{{universeId}}/storyboard/{{storyboardId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "api",
                "universes",
                "{{universeId}}",
                "storyboard",
                "{{storyboardId}}"
              ]
            }
          }
        }
      ]
    }
  ]
}
