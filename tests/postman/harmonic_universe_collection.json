{
  "info": {
    "name": "Harmonic Universe API",
    "description": "API testing suite for Harmonic Universe",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://127.0.0.1:5001/api",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Sign Up",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/signup",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signup"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"Test123!\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has token and user data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('token');",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('id');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "    pm.expect(response.user).to.have.property('username');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"Test123!\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has token and user data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('token');",
                  "    pm.environment.set('authToken', response.token);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Validate Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/validate",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "validate"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response indicates valid token', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.valid).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/user",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "user"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"updateduser\",\n  \"email\": \"updated@example.com\",\n  \"password\": \"UpdatedPass123!\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated user data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message').equals('User updated successfully');",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('username').equals('updateduser');",
                  "    pm.expect(response.user).to.have.property('email').equals('updated@example.com');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/user",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "user"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms deletion', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message').equals('User account deleted successfully');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Universe Management",
      "item": [
        {
          "name": "Create Universe",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/universes",
              "host": ["{{baseUrl}}"],
              "path": ["universes"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Universe\",\n  \"description\": \"A test universe\",\n  \"gravity_constant\": 9.81,\n  \"environment_harmony\": 0.5\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has universe data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('universe');",
                  "    pm.environment.set('universeId', response.universe.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Universes",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/universes",
              "host": ["{{baseUrl}}"],
              "path": ["universes"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Universe by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/universes/{{universeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["universes", "{{universeId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has universe data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.id).to.equal(pm.environment.get('universeId'));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Universe",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/universes/{{universeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["universes", "{{universeId}}"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Universe\",\n  \"description\": \"An updated test universe\",\n  \"gravity_constant\": 10.0,\n  \"environment_harmony\": 0.8\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated universe data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message').equals('Universe updated successfully');",
                  "    pm.expect(response).to.have.property('universe');",
                  "    pm.expect(response.universe).to.have.property('name').equals('Updated Universe');",
                  "    pm.expect(response.universe).to.have.property('gravity_constant').equals(10.0);",
                  "    pm.expect(response.universe).to.have.property('environment_harmony').equals(0.8);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Universe",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/universes/{{universeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["universes", "{{universeId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms deletion', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message').equals('Universe deleted successfully');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Storyboard Management",
      "item": [
        {
          "name": "Create Storyboard",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/universes/{{universeId}}/storyboards",
              "host": ["{{baseUrl}}"],
              "path": ["universes", "{{universeId}}", "storyboards"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"plot_point\": \"Test Plot Point\",\n  \"description\": \"A test storyboard\",\n  \"harmony_tie\": 0.7\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has storyboard data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('storyboard');",
                  "    pm.environment.set('storyboardId', response.storyboard.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Storyboards",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/universes/{{universeId}}/storyboards",
              "host": ["{{baseUrl}}"],
              "path": ["universes", "{{universeId}}", "storyboards"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('storyboards');",
                  "    pm.expect(response).to.have.property('pagination');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Physics Parameters",
      "item": [
        {
          "name": "Create Physics Parameter",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/universes/{{universeId}}/physics",
              "host": ["{{baseUrl}}"],
              "path": ["universes", "{{universeId}}", "physics"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Speed of Light\",\n  \"value\": 299792458,\n  \"unit\": \"m/s\",\n  \"description\": \"Speed of light in vacuum\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has parameter data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('parameter');",
                  "    pm.environment.set('physicsParamId', response.parameter.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Physics Parameters",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/universes/{{universeId}}/physics",
              "host": ["{{baseUrl}}"],
              "path": ["universes", "{{universeId}}", "physics"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has parameters array', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('parameters');",
                  "    pm.expect(response).to.have.property('pagination');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Music Parameters",
      "item": [
        {
          "name": "Create Music Parameter",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/universes/{{universeId}}/music",
              "host": ["{{baseUrl}}"],
              "path": ["universes", "{{universeId}}", "music"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Base Frequency\",\n  \"value\": 440,\n  \"unit\": \"Hz\",\n  \"description\": \"Standard pitch A4\",\n  \"harmony_impact\": 0.8\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has parameter data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('parameter');",
                  "    pm.environment.set('musicParamId', response.parameter.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Music Parameters",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/universes/{{universeId}}/music",
              "host": ["{{baseUrl}}"],
              "path": ["universes", "{{universeId}}", "music"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "10"
                },
                {
                  "key": "harmony_min",
                  "value": "0.5"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has parameters array', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('parameters');",
                  "    pm.expect(response).to.have.property('pagination');",
                  "    pm.expect(response).to.have.property('filters');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
