import{a as e}from"./vendor-redux-toolkit.fa18e013.js";import{a as s,b as d,c as n,u as r,d as a,r as i}from"./app-redux-scene-thunks.d96f7130.js";const c={scenes:[],currentScene:null,loading:!1,error:null,success:!1,universeScenes:{},message:"",locallyCreatedScenes:[]},l=e({name:"scenes",initialState:c,reducers:{clearSceneError(e){e.error=null},clearSceneSuccess(e){e.success=!1},resetSceneState:e=>c,setError(e,s){e.error=s.payload,e.loading=!1},setCurrentScene(e,s){e.currentScene=s.payload},addScene(e,s){if(!e.scenes.some((e=>e.id===s.payload.id))){const d={...s.payload,is_deleted:!1};e.scenes.push(d)}},addLocallyCreatedScene(e,s){if(!e.locallyCreatedScenes.some((e=>e.id===s.payload.id))){const d={...s.payload,is_deleted:!1};e.locallyCreatedScenes.push(d);if(e.scenes.some((e=>e.id===s.payload.id))||e.scenes.push(d),d.universe_id){e.universeScenes[d.universe_id]||(e.universeScenes[d.universe_id]=[]);e.universeScenes[d.universe_id].some((e=>e.id===d.id))||e.universeScenes[d.universe_id].push(d)}}}},extraReducers:e=>{e.addCase(s.pending,(e=>{e.loading=!0,e.error=null})).addCase(s.fulfilled,((e,s)=>{var d;e.loading=!1;const n=null==(d=s.meta)?void 0:d.arg;if(s.payload&&s.payload.scenes){const d=new Map;e.universeScenes[n]&&e.universeScenes[n].forEach((e=>{e&&e.id&&d.set(e.id,e)}));s.payload.scenes.filter((e=>e&&!0!==e.is_deleted)).forEach((e=>{e&&e.id&&d.set(e.id,{...e,is_deleted:!1})})),e.locallyCreatedScenes.length>0&&e.locallyCreatedScenes.forEach((e=>{e&&e.id&&!d.has(e.id)&&e.universe_id===n&&d.set(e.id,{...e,is_deleted:!1})}));const r=Array.from(d.values());n&&(e.universeScenes[n]=r);const a=new Map;e.scenes.forEach((e=>{e&&e.id&&a.set(e.id,e)})),r.forEach((e=>{e&&e.id&&a.set(e.id,e)})),e.scenes=Array.from(a.values())}else{const s=e.universeScenes[n]||[],d=e.locallyCreatedScenes.filter((e=>e&&e.universe_id===n)),r=new Map;s.forEach((e=>{e&&e.id&&r.set(e.id,{...e,is_deleted:!1})})),d.forEach((e=>{e&&e.id&&r.set(e.id,{...e,is_deleted:!1})}));const a=Array.from(r.values());n&&(e.universeScenes[n]=a);const i=new Map;e.scenes.forEach((e=>{e&&e.id&&i.set(e.id,e)})),a.forEach((e=>{e&&e.id&&i.set(e.id,e)})),e.scenes=Array.from(i.values())}})).addCase(s.rejected,((e,s)=>{e.loading=!1,e.error=s.payload||"Failed to fetch scenes"})).addCase(d.pending,(e=>{e.loading=!0,e.error=null})).addCase(d.fulfilled,((e,s)=>{e.loading=!1,s.payload&&s.payload.scene&&(e.currentScene={...s.payload.scene,is_deleted:!1})})).addCase(d.rejected,((e,s)=>{e.loading=!1,e.error=s.payload||"Failed to fetch scene"})).addCase(n.pending,(e=>{e.loading=!0,e.error=null,e.success=!1})).addCase(n.fulfilled,((e,s)=>{if(e.loading=!1,e.success=!0,s.payload&&s.payload.scene){const d={...s.payload.scene,is_deleted:!1};e.scenes.some((e=>e.id===d.id))||e.scenes.push(d);if(e.locallyCreatedScenes.some((e=>e.id===d.id))||e.locallyCreatedScenes.push(d),d.universe_id){e.universeScenes[d.universe_id]||(e.universeScenes[d.universe_id]=[]);e.universeScenes[d.universe_id].some((e=>e.id===d.id))||e.universeScenes[d.universe_id].push(d)}e.currentScene=d}})).addCase(n.rejected,((e,s)=>{e.loading=!1,e.error=s.payload||"Failed to create scene",e.success=!1})).addCase(r.pending,(e=>{e.loading=!0,e.error=null,e.success=!1})).addCase(r.fulfilled,((e,s)=>{if(e.loading=!1,e.success=!0,s.payload&&s.payload.scene){const d={...s.payload.scene,is_deleted:!1},n=e.scenes.findIndex((e=>e.id===d.id));if(-1!==n&&(e.scenes[n]=d),d.universe_id&&e.universeScenes[d.universe_id]){const s=e.universeScenes[d.universe_id].findIndex((e=>e.id===d.id));-1!==s?e.universeScenes[d.universe_id][s]=d:e.universeScenes[d.universe_id].push(d)}const r=e.locallyCreatedScenes.findIndex((e=>e.id===d.id));-1!==r&&(e.locallyCreatedScenes[r]=d),e.currentScene&&e.currentScene.id===d.id&&(e.currentScene=d)}})).addCase(r.rejected,((e,s)=>{e.loading=!1,e.error=s.payload||"Failed to update scene",e.success=!1})).addCase(a.pending,(e=>{e.loading=!0,e.error=null,e.success=!1})).addCase(a.fulfilled,((e,s)=>{if(e.loading=!1,e.success=!0,s.payload&&s.payload.id){const d=s.payload.id,n=e.scenes.find((e=>e.id===d)),r=null==n?void 0:n.universe_id;e.scenes=e.scenes.filter((e=>e.id!==d)),e.locallyCreatedScenes=e.locallyCreatedScenes.filter((e=>e.id!==d)),r&&e.universeScenes[r]?e.universeScenes[r]=e.universeScenes[r].filter((e=>e.id!==d)):Object.keys(e.universeScenes).forEach((s=>{e.universeScenes[s]=e.universeScenes[s].filter((e=>e.id!==d))})),e.currentScene&&e.currentScene.id===d&&(e.currentScene=null)}})).addCase(a.rejected,((e,s)=>{e.loading=!1,e.error=s.payload||"Failed to delete scene",e.success=!1})).addCase(i.pending,(e=>{e.loading=!0,e.error=null})).addCase(i.fulfilled,((e,s)=>{e.loading=!1;const{universeId:d}=s.meta.arg,n=s.payload.scenes.map((e=>({...e,is_deleted:!1})));if(e.universeScenes[d]=n,e.scenes=e.scenes.map((e=>{if(e.universe_id===d){return n.find((s=>s.id===e.id))||e}return e})),e.currentScene&&e.currentScene.universe_id===d){const s=n.find((s=>s.id===e.currentScene.id));s&&(e.currentScene=s)}})).addCase(i.rejected,((e,s)=>{e.loading=!1,e.error=s.payload||"Failed to reorder scenes"}))}}),{clearSceneError:o,clearSceneSuccess:t,resetSceneState:u,setError:S,setCurrentScene:p,addScene:v,addLocallyCreatedScene:f}=l.actions,y=l.reducer;export{v as a,f as b,y as s};
