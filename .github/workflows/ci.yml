name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: harmonic_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Generate PWA assets
        run: |
          cd frontend
          npm run generate-pwa-assets

      - name: Run backend tests
        run: |
          cd backend
          python -m pytest
        env:
          FLASK_ENV: testing
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/harmonic_test

      - name: Run frontend unit tests
        run: |
          cd frontend
          npm run test:ci

      - name: Run PWA tests
        run: |
          cd frontend
          npm run test:pwa
          npm run test:monitoring

      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e

      - name: Run load tests
        run: |
          cd frontend
          npm install -g k6
          k6 run src/tests/load/api.test.js
          k6 run src/tests/load/websocket.test.js

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            backend/coverage.xml
            frontend/coverage
            frontend/cypress/videos
            frontend/cypress/screenshots

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Generate PWA assets
        run: |
          cd frontend
          npm run generate-pwa-assets

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Optimize assets
        run: |
          cd frontend
          npm run optimize-assets

      - name: Deploy to Render
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
