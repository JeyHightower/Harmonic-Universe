"""Initial migration

Revision ID: c47eaccc538c
Revises: 
Create Date: 2025-03-30 16:14:34.494410

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = 'c47eaccc538c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('_alembic_tmp_notes')
    with op.batch_alter_table('notes', schema=None) as batch_op:
        batch_op.add_column(sa.Column('title', sa.String(length=200), nullable=False))
        batch_op.add_column(sa.Column('tags', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('is_public', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('is_archived', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('position_x', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('position_y', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('position_z', sa.Float(), nullable=False))
        batch_op.alter_column('universe_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.create_index(batch_op.f('ix_notes_title'), ['title'], unique=False)

    with op.batch_alter_table('physics_2d', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.String(length=100), nullable=False))
        batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('gravity_x', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('gravity_y', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('allow_sleep', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('warm_starting', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('continuous_physics', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('sub_stepping', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('velocity_iterations', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('position_iterations', sa.Integer(), nullable=False))
        batch_op.alter_column('universe_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_index('ix_physics_2d_user_id')
        batch_op.create_index(batch_op.f('ix_physics_2d_name'), ['name'], unique=False)
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('friction')
        batch_op.drop_column('air_resistance')
        batch_op.drop_column('elasticity')
        batch_op.drop_column('gravity')
        batch_op.drop_column('user_id')

    with op.batch_alter_table('physics_3d', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.String(length=100), nullable=False))
        batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('gravity_x', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('gravity_y', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('gravity_z', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('allow_sleep', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('warm_starting', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('continuous_physics', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('sub_stepping', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('solver_iterations', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('solver_tolerance', sa.Float(), nullable=False))
        batch_op.alter_column('universe_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_index('ix_physics_3d_user_id')
        batch_op.create_index(batch_op.f('ix_physics_3d_name'), ['name'], unique=False)
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('friction')
        batch_op.drop_column('air_resistance')
        batch_op.drop_column('elasticity')
        batch_op.drop_column('gravity')
        batch_op.drop_column('user_id')

    with op.batch_alter_table('physics_constraints', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.String(length=100), nullable=False))
        batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('body_a_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('body_b_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('constraint_type', sa.String(length=50), nullable=False))
        batch_op.add_column(sa.Column('constraint_data', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('enable_collision', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('break_force', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('break_torque', sa.Float(), nullable=True))
        batch_op.alter_column('universe_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_index('ix_physics_constraints_object1_id')
        batch_op.drop_index('ix_physics_constraints_object2_id')
        batch_op.drop_index('ix_physics_constraints_type')
        batch_op.create_index(batch_op.f('ix_physics_constraints_body_a_id'), ['body_a_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_physics_constraints_body_b_id'), ['body_b_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_physics_constraints_name'), ['name'], unique=False)
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'physics_objects', ['body_a_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key(None, 'physics_objects', ['body_b_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_column('parameters')
        batch_op.drop_column('object2_id')
        batch_op.drop_column('object1_id')
        batch_op.drop_column('type')

    with op.batch_alter_table('physics_objects', schema=None) as batch_op:
        batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('rotation_x', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('rotation_y', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('rotation_z', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('scale_x', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('scale_y', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('scale_z', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('restitution', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('friction', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('linear_damping', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('angular_damping', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('is_static', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('is_trigger', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('shape_type', sa.String(length=50), nullable=False))
        batch_op.add_column(sa.Column('shape_data', sa.JSON(), nullable=True))
        batch_op.alter_column('universe_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('position_x',
               existing_type=sa.FLOAT(),
               nullable=False)
        batch_op.alter_column('position_y',
               existing_type=sa.FLOAT(),
               nullable=False)
        batch_op.alter_column('position_z',
               existing_type=sa.FLOAT(),
               nullable=False)
        batch_op.alter_column('mass',
               existing_type=sa.FLOAT(),
               nullable=False)
        batch_op.drop_index('ix_physics_objects_character_id')
        batch_op.drop_index('ix_physics_objects_physics_2d_id')
        batch_op.drop_index('ix_physics_objects_physics_3d_id')
        batch_op.drop_index('ix_physics_objects_type')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('type')
        batch_op.drop_column('velocity_x')
        batch_op.drop_column('physics_3d_id')
        batch_op.drop_column('velocity_z')
        batch_op.drop_column('physics_2d_id')
        batch_op.drop_column('velocity_y')
        batch_op.drop_column('character_id')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('physics_objects', schema=None) as batch_op:
        batch_op.add_column(sa.Column('character_id', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('velocity_y', sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('physics_2d_id', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('velocity_z', sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('physics_3d_id', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('velocity_x', sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('type', sa.VARCHAR(length=50), nullable=False))
        batch_op.create_foreign_key(None, 'physics_2d', ['physics_2d_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key(None, 'physics_3d', ['physics_3d_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key(None, 'characters', ['character_id'], ['id'], ondelete='CASCADE')
        batch_op.create_index('ix_physics_objects_type', ['type'], unique=False)
        batch_op.create_index('ix_physics_objects_physics_3d_id', ['physics_3d_id'], unique=False)
        batch_op.create_index('ix_physics_objects_physics_2d_id', ['physics_2d_id'], unique=False)
        batch_op.create_index('ix_physics_objects_character_id', ['character_id'], unique=False)
        batch_op.alter_column('mass',
               existing_type=sa.FLOAT(),
               nullable=True)
        batch_op.alter_column('position_z',
               existing_type=sa.FLOAT(),
               nullable=True)
        batch_op.alter_column('position_y',
               existing_type=sa.FLOAT(),
               nullable=True)
        batch_op.alter_column('position_x',
               existing_type=sa.FLOAT(),
               nullable=True)
        batch_op.alter_column('universe_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('shape_data')
        batch_op.drop_column('shape_type')
        batch_op.drop_column('is_trigger')
        batch_op.drop_column('is_static')
        batch_op.drop_column('angular_damping')
        batch_op.drop_column('linear_damping')
        batch_op.drop_column('friction')
        batch_op.drop_column('restitution')
        batch_op.drop_column('scale_z')
        batch_op.drop_column('scale_y')
        batch_op.drop_column('scale_x')
        batch_op.drop_column('rotation_z')
        batch_op.drop_column('rotation_y')
        batch_op.drop_column('rotation_x')
        batch_op.drop_column('description')

    with op.batch_alter_table('physics_constraints', schema=None) as batch_op:
        batch_op.add_column(sa.Column('type', sa.VARCHAR(length=50), nullable=False))
        batch_op.add_column(sa.Column('object1_id', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('object2_id', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('parameters', sqlite.JSON(), nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'physics_objects', ['object1_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key(None, 'physics_objects', ['object2_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_index(batch_op.f('ix_physics_constraints_name'))
        batch_op.drop_index(batch_op.f('ix_physics_constraints_body_b_id'))
        batch_op.drop_index(batch_op.f('ix_physics_constraints_body_a_id'))
        batch_op.create_index('ix_physics_constraints_type', ['type'], unique=False)
        batch_op.create_index('ix_physics_constraints_object2_id', ['object2_id'], unique=False)
        batch_op.create_index('ix_physics_constraints_object1_id', ['object1_id'], unique=False)
        batch_op.alter_column('universe_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('break_torque')
        batch_op.drop_column('break_force')
        batch_op.drop_column('enable_collision')
        batch_op.drop_column('constraint_data')
        batch_op.drop_column('constraint_type')
        batch_op.drop_column('body_b_id')
        batch_op.drop_column('body_a_id')
        batch_op.drop_column('description')
        batch_op.drop_column('name')

    with op.batch_alter_table('physics_3d', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('gravity', sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('elasticity', sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('air_resistance', sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('friction', sa.FLOAT(), nullable=True))
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_index(batch_op.f('ix_physics_3d_name'))
        batch_op.create_index('ix_physics_3d_user_id', ['user_id'], unique=False)
        batch_op.alter_column('universe_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('solver_tolerance')
        batch_op.drop_column('solver_iterations')
        batch_op.drop_column('sub_stepping')
        batch_op.drop_column('continuous_physics')
        batch_op.drop_column('warm_starting')
        batch_op.drop_column('allow_sleep')
        batch_op.drop_column('gravity_z')
        batch_op.drop_column('gravity_y')
        batch_op.drop_column('gravity_x')
        batch_op.drop_column('description')
        batch_op.drop_column('name')

    with op.batch_alter_table('physics_2d', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('gravity', sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('elasticity', sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('air_resistance', sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('friction', sa.FLOAT(), nullable=True))
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_index(batch_op.f('ix_physics_2d_name'))
        batch_op.create_index('ix_physics_2d_user_id', ['user_id'], unique=False)
        batch_op.alter_column('universe_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('position_iterations')
        batch_op.drop_column('velocity_iterations')
        batch_op.drop_column('sub_stepping')
        batch_op.drop_column('continuous_physics')
        batch_op.drop_column('warm_starting')
        batch_op.drop_column('allow_sleep')
        batch_op.drop_column('gravity_y')
        batch_op.drop_column('gravity_x')
        batch_op.drop_column('description')
        batch_op.drop_column('name')

    with op.batch_alter_table('notes', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_notes_title'))
        batch_op.alter_column('universe_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('position_z')
        batch_op.drop_column('position_y')
        batch_op.drop_column('position_x')
        batch_op.drop_column('is_archived')
        batch_op.drop_column('is_public')
        batch_op.drop_column('tags')
        batch_op.drop_column('title')

    op.create_table('_alembic_tmp_notes',
    sa.Column('content', sa.TEXT(), nullable=False),
    sa.Column('universe_id', sa.INTEGER(), nullable=False),
    sa.Column('scene_id', sa.INTEGER(), nullable=True),
    sa.Column('character_id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), nullable=True),
    sa.Column('title', sa.VARCHAR(length=200), nullable=False),
    sa.Column('tags', sqlite.JSON(), nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), nullable=False),
    sa.Column('is_archived', sa.BOOLEAN(), nullable=False),
    sa.Column('position_x', sa.FLOAT(), nullable=False),
    sa.Column('position_y', sa.FLOAT(), nullable=False),
    sa.Column('position_z', sa.FLOAT(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['scene_id'], ['scenes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
