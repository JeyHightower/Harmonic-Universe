"""initial migration

Revision ID: 6de4ec169593
Revises: bcda4365b813
Create Date: 2025-02-11 16:35:05.222945

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6de4ec169593'
down_revision = 'bcda4365b813'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_audio_tracks_name', table_name='audio_tracks')
    op.drop_table('audio_tracks')
    op.drop_table('projects')
    op.drop_table('audio_files')
    op.drop_index('ix_physics_objects_name', table_name='physics_objects')
    op.drop_table('physics_objects')
    op.drop_table('training_sessions')
    op.drop_index('ix_datasets_name', table_name='datasets')
    op.drop_table('datasets')
    op.drop_index('ix_audio_markers_name', table_name='audio_markers')
    op.drop_table('audio_markers')
    op.drop_table('user_roles')
    op.drop_table('users')
    op.drop_table('visualizations')
    op.drop_table('inference_results')
    op.drop_table('organizations')
    op.drop_index('ix_midi_events_event_type', table_name='midi_events')
    op.drop_table('midi_events')
    op.drop_table('workspace_users')
    op.drop_table('audio_automation')
    op.drop_index('ix_midi_sequences_name', table_name='midi_sequences')
    op.drop_table('midi_sequences')
    op.drop_table('universes')
    op.drop_table('scenes')
    op.drop_table('activities')
    op.drop_table('roles')
    op.drop_index('ix_ai_models_name', table_name='ai_models')
    op.drop_table('ai_models')
    op.drop_index('ix_physics_constraints_name', table_name='physics_constraints')
    op.drop_table('physics_constraints')
    op.drop_table('resources')
    op.drop_table('workspaces')
    op.drop_table('project_users')
    op.drop_table('physics_parameters')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('physics_parameters',
    sa.Column('scene_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('gravity', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('air_resistance', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('collision_elasticity', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('friction', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('temperature', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('pressure', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('fluid_density', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('viscosity', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('time_step', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('substeps', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('custom_parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['scene_id'], ['scenes.id'], name='physics_parameters_scene_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='physics_parameters_pkey'),
    sa.UniqueConstraint('scene_id', name='physics_parameters_scene_id_key')
    )
    op.create_table('project_users',
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='project_users_project_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='project_users_user_id_fkey', ondelete='CASCADE')
    )
    op.create_table('workspaces',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='workspaces_organization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='workspaces_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('resources',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='resources_project_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='resources_pkey')
    )
    op.create_table('physics_constraints',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('scene_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('constraint_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('object_a_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('object_b_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('anchor_a', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('anchor_b', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('axis_a', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('axis_b', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('limits', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('spring_properties', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('breaking_force', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['object_a_id'], ['physics_objects.id'], name='physics_constraints_object_a_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['object_b_id'], ['physics_objects.id'], name='physics_constraints_object_b_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['scene_id'], ['scenes.id'], name='physics_constraints_scene_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='physics_constraints_pkey')
    )
    op.create_index('ix_physics_constraints_name', 'physics_constraints', ['name'], unique=False)
    op.create_table('ai_models',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('model_type', postgresql.ENUM('AUDIO_GENERATION', 'AUDIO_ANALYSIS', 'PHYSICS_SIMULATION', 'VISUALIZATION', 'CUSTOM', name='modeltype'), autoincrement=False, nullable=True),
    sa.Column('architecture', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('INITIALIZING', 'TRAINING', 'READY', 'ERROR', 'ARCHIVED', name='modelstatus'), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='ai_models_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='ai_models_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_ai_models_name', 'ai_models', ['name'], unique=False)
    op.create_table('roles',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='roles_organization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='roles_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('activities',
    sa.Column('action', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='activities_project_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='activities_user_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='activities_pkey')
    )
    op.create_table('scenes',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('universe_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('creator_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('physics_overrides', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('harmony_overrides', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('visualization_settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ai_settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timeline_settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], name='scenes_creator_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], name='scenes_universe_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='scenes_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('universes',
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('physics_params', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('harmony_params', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('story_points', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('visualization_params', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ai_params', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='universes_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='universes_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('midi_sequences',
    sa.Column('scene_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tempo', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('time_signature', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_loop', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('loop_start', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('loop_end', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('quantization', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['scene_id'], ['scenes.id'], name='midi_sequences_scene_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='midi_sequences_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_midi_sequences_name', 'midi_sequences', ['name'], unique=False)
    op.create_table('audio_automation',
    sa.Column('track_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('parameter_type', postgresql.ENUM('VOLUME', 'PAN', 'EFFECT_PARAM', 'CUSTOM', name='automationtype'), autoincrement=False, nullable=True),
    sa.Column('target_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('points', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('curve_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['track_id'], ['audio_tracks.id'], name='audio_automation_track_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='audio_automation_pkey')
    )
    op.create_table('workspace_users',
    sa.Column('workspace_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='workspace_users_user_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], name='workspace_users_workspace_id_fkey', ondelete='CASCADE')
    )
    op.create_table('midi_events',
    sa.Column('sequence_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('channel', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('note', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('velocity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('control_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('control_value', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timestamp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['sequence_id'], ['midi_sequences.id'], name='midi_events_sequence_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='midi_events_pkey')
    )
    op.create_index('ix_midi_events_event_type', 'midi_events', ['event_type'], unique=False)
    op.create_table('organizations',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('website', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('logo_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='organizations_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('inference_results',
    sa.Column('model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('timestamp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('input_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('output_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['ai_models.id'], name='inference_results_model_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='inference_results_pkey')
    )
    op.create_table('visualizations',
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('audio_file_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('universe_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['audio_file_id'], ['audio_files.id'], name='visualizations_audio_file_id_fkey'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='visualizations_project_id_fkey'),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], name='visualizations_universe_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='visualizations_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='visualizations_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=7), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('username', name='users_username_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='user_roles_role_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_roles_user_id_fkey', ondelete='CASCADE')
    )
    op.create_table('audio_markers',
    sa.Column('track_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['track_id'], ['audio_tracks.id'], name='audio_markers_track_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='audio_markers_pkey')
    )
    op.create_index('ix_audio_markers_name', 'audio_markers', ['name'], unique=False)
    op.create_table('datasets',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('data_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('format', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('size', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('features', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('dataset_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='datasets_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='datasets_pkey')
    )
    op.create_index('ix_datasets_name', 'datasets', ['name'], unique=False)
    op.create_table('training_sessions',
    sa.Column('model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('start_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('end_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('hyperparameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_results', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['ai_models.id'], name='training_sessions_model_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='training_sessions_pkey')
    )
    op.create_table('physics_objects',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('scene_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('mass', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('position', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('velocity', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('acceleration', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('rotation', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('angular_velocity', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('scale', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_static', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_trigger', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('collision_shape', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('collision_params', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('material_properties', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['scene_id'], ['scenes.id'], name='physics_objects_scene_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='physics_objects_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='physics_objects_pkey')
    )
    op.create_index('ix_physics_objects_name', 'physics_objects', ['name'], unique=False)
    op.create_table('audio_files',
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sample_rate', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('channels', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='audio_files_project_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='audio_files_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='audio_files_pkey')
    )
    op.create_table('projects',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('workspace_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='projects_organization_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], name='projects_workspace_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='projects_pkey')
    )
    op.create_table('audio_tracks',
    sa.Column('scene_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('midi_sequence_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('file_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sample_rate', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('channels', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_muted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('volume', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pan', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('start_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('end_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('loop_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('effects', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['midi_sequence_id'], ['midi_sequences.id'], name='audio_tracks_midi_sequence_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['scene_id'], ['scenes.id'], name='audio_tracks_scene_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='audio_tracks_pkey')
    )
    op.create_index('ix_audio_tracks_name', 'audio_tracks', ['name'], unique=False)
    # ### end Alembic commands ###
