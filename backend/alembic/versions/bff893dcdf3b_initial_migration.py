"""Initial migration

Revision ID: bff893dcdf3b
Revises:
Create Date: 2025-02-02 22:31:51.275903

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from app.db.custom_types import GUID
from sqlalchemy import Text

# revision identifiers, used by Alembic.
revision: str = 'bff893dcdf3b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_model',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('model_type', sa.Enum('PARAMETER_GENERATION', 'MUSIC_GENERATION', 'VISUALIZATION', name='aimodeltype'), nullable=False),
    sa.Column('provider', sa.String(), nullable=False),
    sa.Column('configuration', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('api_key', sa.String(), nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('model_metadata', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ai_model'))
    )
    op.create_table('users',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=True),
    sa.Column('hashed_password', sa.Text(), nullable=False),
    sa.Column('full_name', sa.String(length=100), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('email_verified', sa.Boolean(), nullable=False),
    sa.Column('verification_token', sa.String(length=255), nullable=True),
    sa.Column('reset_password_token', sa.String(length=255), nullable=True),
    sa.Column('reset_password_expires', sa.DateTime(timezone=True), nullable=True),
    sa.Column('display_name', sa.String(length=100), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_full_name'), 'users', ['full_name'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('universes',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('physics_parameters', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('music_parameters', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('creator_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('max_participants', sa.Integer(), nullable=False),
    sa.Column('collaborators_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], name=op.f('fk_universes_creator_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_universes'))
    )
    op.create_table('ai_generations',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('model_id', GUID(), nullable=False),
    sa.Column('universe_id', GUID(), nullable=False),
    sa.Column('generation_type', sa.Enum('PARAMETER_GENERATION', 'MUSIC_GENERATION', 'VISUALIZATION', name='aimodeltype'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='generationstatus'), nullable=False),
    sa.Column('input_data', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), nullable=False),
    sa.Column('output_data', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('generation_metadata', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['ai_model.id'], name=op.f('fk_ai_generations_model_id_ai_model'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], name=op.f('fk_ai_generations_universe_id_universes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ai_generations'))
    )
    op.create_table('music_parameter',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('unit', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('metadata_json', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('universe_id', GUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], name=op.f('fk_music_parameter_universe_id_universes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_music_parameter'))
    )
    op.create_index(op.f('ix_music_parameter_id'), 'music_parameter', ['id'], unique=False)
    op.create_table('physics_parameter',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('parameter_metadata', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('universe_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], name=op.f('fk_physics_parameter_universe_id_universes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_physics_parameter'))
    )
    op.create_table('storyboards',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('timeline_data', sa.JSON(), server_default='{}', nullable=False),
    sa.Column('scene_order', sa.JSON(), server_default='[]', nullable=False),
    sa.Column('transitions', sa.JSON(), server_default='{}', nullable=False),
    sa.Column('narrative', sa.JSON(), server_default='{}', nullable=False),
    sa.Column('storyboard_metadata', sa.JSON(), server_default='{}', nullable=False),
    sa.Column('universe_id', GUID(), nullable=False),
    sa.Column('creator_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], name=op.f('fk_storyboards_creator_id_users')),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], name=op.f('fk_storyboards_universe_id_universes')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_storyboards'))
    )
    op.create_table('audio_file',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('format', sa.Enum('WAV', 'MP3', 'MIDI', 'OGG', 'FLAC', 'AAC', 'M4A', name='audioformat'), nullable=False),
    sa.Column('type', sa.Enum('MUSIC', 'SOUND_EFFECT', 'VOICE', 'AMBIENT', 'GENERATED', 'UPLOADED', 'PROCESSED', 'RENDERED', 'OTHER', name='audiotype'), nullable=False),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('sample_rate', sa.Integer(), nullable=True),
    sa.Column('channels', sa.Integer(), nullable=True),
    sa.Column('bit_depth', sa.Integer(), nullable=True),
    sa.Column('file_path', sa.String(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('waveform_data', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), nullable=True),
    sa.Column('audio_metadata', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('universe_id', GUID(), nullable=False),
    sa.Column('creator_id', GUID(), nullable=False),
    sa.Column('generation_id', GUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], name=op.f('fk_audio_file_creator_id_users')),
    sa.ForeignKeyConstraint(['generation_id'], ['ai_generations.id'], name=op.f('fk_audio_file_generation_id_ai_generations'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], name=op.f('fk_audio_file_universe_id_universes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_audio_file'))
    )
    op.create_table('scene',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('physics_parameters', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('music_parameters', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('rendering_mode', sa.Enum('WIREFRAME', 'SOLID', 'TEXTURED', 'REALISTIC', 'WEBGL', name='renderingmode'), nullable=False),
    sa.Column('creator_id', GUID(), nullable=False),
    sa.Column('universe_id', GUID(), nullable=False),
    sa.Column('storyboard_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], name=op.f('fk_scene_creator_id_users')),
    sa.ForeignKeyConstraint(['storyboard_id'], ['storyboards.id'], name=op.f('fk_scene_storyboard_id_storyboards')),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], name=op.f('fk_scene_universe_id_universes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_scene'))
    )
    op.create_table('export',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('scene_id', GUID(), nullable=False),
    sa.Column('format', sa.Enum('MP4', 'MOV', 'AVI', 'GIF', 'PNG_SEQUENCE', 'JPEG_SEQUENCE', name='exportformat'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='exportstatus'), nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('output_path', sa.String(), nullable=True),
    sa.Column('error_message', sa.String(), nullable=True),
    sa.Column('progress', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['scene_id'], ['scene.id'], name=op.f('fk_export_scene_id_scene'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_export'))
    )
    op.create_table('midi_event',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('audio_file_id', GUID(), nullable=False),
    sa.Column('event_type', sa.Enum('NOTE_ON', 'NOTE_OFF', 'CONTROL_CHANGE', 'PROGRAM_CHANGE', 'PITCH_BEND', 'AFTERTOUCH', 'SYSTEM', name='midieventtype'), nullable=False),
    sa.Column('timestamp', sa.Float(), nullable=False),
    sa.Column('channel', sa.Integer(), nullable=False),
    sa.Column('note', sa.Integer(), nullable=True),
    sa.Column('velocity', sa.Integer(), nullable=True),
    sa.Column('control', sa.Integer(), nullable=True),
    sa.Column('value', sa.Integer(), nullable=True),
    sa.Column('event_metadata', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['audio_file_id'], ['audio_file.id'], name=op.f('fk_midi_event_audio_file_id_audio_file'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_midi_event'))
    )
    op.create_index(op.f('ix_midi_event_id'), 'midi_event', ['id'], unique=False)
    op.create_table('physics_constraints',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('scene_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['scene_id'], ['scene.id'], name=op.f('fk_physics_constraints_scene_id_scene'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_physics_constraints'))
    )
    op.create_table('physics_objects',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('scene_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['scene_id'], ['scene.id'], name=op.f('fk_physics_objects_scene_id_scene'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_physics_objects'))
    )
    op.create_table('scene_object',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('scene_id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.Enum('MESH', 'LIGHT', 'CAMERA', 'PARTICLE', 'SOUND', 'EFFECT', name='sceneobjecttype'), nullable=False),
    sa.Column('properties', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('object_metadata', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['scene_id'], ['scene.id'], name=op.f('fk_scene_object_scene_id_scene'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_scene_object'))
    )
    op.create_table('timeline',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=False),
    sa.Column('scene_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['scene_id'], ['scene.id'], name=op.f('fk_timeline_scene_id_scene'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_timeline'))
    )
    op.create_table('visualizations',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('scene_id', GUID(), nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('visualization_metadata', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['scene_id'], ['scene.id'], name=op.f('fk_visualizations_scene_id_scene'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_visualizations'))
    )
    op.create_table('animation',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('target_object', sa.String(), nullable=False),
    sa.Column('property_path', sa.String(), nullable=False),
    sa.Column('timeline_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['timeline_id'], ['timeline.id'], name=op.f('fk_animation_timeline_id_timeline'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_animation'))
    )
    op.create_table('keyframes',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('timestamp', sa.Float(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('storyboard_id', GUID(), nullable=False),
    sa.Column('animation_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['animation_id'], ['animation.id'], name=op.f('fk_keyframes_animation_id_animation'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['storyboard_id'], ['storyboards.id'], name=op.f('fk_keyframes_storyboard_id_storyboards')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_keyframes'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('keyframes')
    op.drop_table('animation')
    op.drop_table('visualizations')
    op.drop_table('timeline')
    op.drop_table('scene_object')
    op.drop_table('physics_objects')
    op.drop_table('physics_constraints')
    op.drop_index(op.f('ix_midi_event_id'), table_name='midi_event')
    op.drop_table('midi_event')
    op.drop_table('export')
    op.drop_table('scene')
    op.drop_table('audio_file')
    op.drop_table('storyboards')
    op.drop_table('physics_parameter')
    op.drop_index(op.f('ix_music_parameter_id'), table_name='music_parameter')
    op.drop_table('music_parameter')
    op.drop_table('ai_generations')
    op.drop_table('universes')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_full_name'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('ai_model')
    # ### end Alembic commands ###
