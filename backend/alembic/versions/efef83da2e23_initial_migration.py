"""initial_migration

Revision ID: efef83da2e23
Revises:
Create Date: 2025-02-01 04:21:40.875578

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from app.db.custom_types import GUID

# revision identifiers, used by Alembic.
revision: str = 'efef83da2e23'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_model',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('model_type', sa.Enum('PARAMETER_GENERATION', 'MUSIC_GENERATION', 'VISUALIZATION', name='aimodeltype'), nullable=False),
    sa.Column('provider', sa.String(), nullable=False),
    sa.Column('configuration', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('api_key', sa.String(), nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('model_metadata', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ai_model'))
    )
    op.create_table('users',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_full_name'), 'users', ['full_name'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('universes',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('physics_parameters', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('music_parameters', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('creator_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], name=op.f('fk_universes_creator_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_universes'))
    )
    op.create_table('ai_generations',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('model_id', GUID(), nullable=False),
    sa.Column('universe_id', GUID(), nullable=False),
    sa.Column('generation_type', sa.Enum('PARAMETER_GENERATION', 'MUSIC_GENERATION', 'VISUALIZATION', name='aimodeltype'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='generationstatus'), nullable=False),
    sa.Column('input_data', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), nullable=False),
    sa.Column('output_data', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('generation_metadata', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['ai_model.id'], name=op.f('fk_ai_generations_model_id_ai_model'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], name=op.f('fk_ai_generations_universe_id_universes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ai_generations'))
    )
    op.create_table('music_parameters',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('universe_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], name=op.f('fk_music_parameters_universe_id_universes')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_music_parameters'))
    )
    op.create_table('physics_parameters',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('universe_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], name=op.f('fk_physics_parameters_universe_id_universes')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_physics_parameters'))
    )
    op.create_table('scene',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('physics_parameters', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('music_parameters', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('rendering_mode', sa.Enum('WIREFRAME', 'SOLID', 'TEXTURED', 'REALISTIC', name='renderingmode'), nullable=False),
    sa.Column('creator_id', GUID(), nullable=False),
    sa.Column('universe_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], name=op.f('fk_scene_creator_id_users')),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], name=op.f('fk_scene_universe_id_universes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_scene'))
    )
    op.create_table('storyboards',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('timeline_data', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('scene_order', postgresql.ARRAY(GUID()).with_variant(sa.JSON(), 'sqlite'), server_default='[]', nullable=False),
    sa.Column('transitions', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('narrative', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('storyboard_metadata', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('universe_id', GUID(), nullable=False),
    sa.Column('creator_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], name=op.f('fk_storyboards_creator_id_users')),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], name=op.f('fk_storyboards_universe_id_universes')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_storyboards'))
    )
    op.create_table('audio_file',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('format', sa.Enum('WAV', 'MP3', 'MIDI', 'OGG', 'FLAC', 'AAC', 'M4A', name='audioformat'), nullable=False),
    sa.Column('type', sa.Enum('MUSIC', 'SOUND_EFFECT', 'VOICE', 'AMBIENT', 'GENERATED', 'UPLOADED', 'PROCESSED', 'RENDERED', 'OTHER', name='audiotype'), nullable=False),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('sample_rate', sa.Integer(), nullable=True),
    sa.Column('channels', sa.Integer(), nullable=True),
    sa.Column('bit_depth', sa.Integer(), nullable=True),
    sa.Column('file_path', sa.String(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('waveform_data', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), nullable=True),
    sa.Column('audio_metadata', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('universe_id', GUID(), nullable=False),
    sa.Column('creator_id', GUID(), nullable=False),
    sa.Column('generation_id', GUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], name=op.f('fk_audio_file_creator_id_users')),
    sa.ForeignKeyConstraint(['generation_id'], ['ai_generations.id'], name=op.f('fk_audio_file_generation_id_ai_generations'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], name=op.f('fk_audio_file_universe_id_universes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_audio_file'))
    )
    op.create_table('keyframes',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('timestamp', sa.Float(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('storyboard_id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['storyboard_id'], ['storyboards.id'], name=op.f('fk_keyframes_storyboard_id_storyboards')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_keyframes'))
    )
    op.create_table('scene_object',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('scene_id', GUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.Enum('MESH', 'LIGHT', 'CAMERA', 'PARTICLE', 'SOUND', 'EFFECT', name='sceneobjecttype'), nullable=False),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('object_metadata', postgresql.JSONB(astext_type=sa.Text()).with_variant(sa.JSON(), 'sqlite'), server_default='{}', nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['scene_id'], ['scene.id'], name=op.f('fk_scene_object_scene_id_scene'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_scene_object'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('scene_object')
    op.drop_table('keyframes')
    op.drop_table('audio_file')
    op.drop_table('storyboards')
    op.drop_table('scene')
    op.drop_table('physics_parameters')
    op.drop_table('music_parameters')
    op.drop_table('ai_generations')
    op.drop_table('universes')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_full_name'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('ai_model')
    # ### end Alembic commands ###
