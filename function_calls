<invoke name="file_search">
<parameter name="query">PhysicsParameter</parameter>
<parameter name="explanation">Looking for the PhysicsParameter model definition</parameter>
</invoke>

<invoke name="file_search">
<parameter name="query">Scene</parameter>
<parameter name="explanation">Looking for the Scene model definition</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">backend/app/models/universe/scene.py</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">100</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">backend/app/models/universe/physics_parameter.py</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">100</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">backend/app/models/__init__.py</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">100</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">backend/app/models/universe/__init__.py</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">100</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">backend/app/api/routes/auth.py</parameter>
<parameter name="should_read_entire_file">false</parameter>
<parameter name="start_line_one_indexed">290</parameter>
<parameter name="end_line_one_indexed_inclusive">320</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">backend/app/models/universe/scene.py</parameter>
<parameter name="instructions">Fix the PhysicsParameter relationship to use string reference instead of direct class reference</parameter>
<parameter name="code_edit">from sqlalchemy import Column, String, Integer, ForeignKey, Boolean, Float, DateTime, JSON, Text
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from app.models.base import Base
import uuid

class Scene(Base):
    """Scene model representing a simulation environment"""
    __tablename__ = 'scenes'

    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    name = Column(String(100), nullable=False)
    description = Column(Text, nullable=True)

    # Foreign key relationships
    user_id = Column(String, ForeignKey('users.id'), nullable=False)
    universe_id = Column(String, ForeignKey('universes.id'), nullable=False)

    # Meta information
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())

    # Scene settings
    settings = Column(JSON, default={})

    # Scale factors
    space_scale = Column(Float, default=1.0)  # Scale factor for space dimensions
    time_scale = Column(Float, default=1.0)   # Scale factor for time

    # Relationships - Use string references to avoid circular imports
    universe = relationship("Universe", back_populates="scenes")
    user = relationship("User", back_populates="scenes")
    particles = relationship("Particle", back_populates="scene", cascade="all, delete-orphan")

    # Use string reference for PhysicsParameter to avoid circular import
    physics_parameters = relationship("PhysicsParameter", back_populates="scene", cascade="all, delete-orphan")

    def __repr__(self):
        return f"<Scene {self.name} (id: {self.id})>"
</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">backend/app/models/universe/physics_parameter.py</parameter>
<parameter name="instructions">Fix the Scene relationship to ensure proper model loading</parameter>
<parameter name="code_edit">from sqlalchemy import Column, String, Integer, ForeignKey, Boolean, Float, DateTime, JSON, Text
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from app.models.base import Base
import uuid

class PhysicsParameter(Base):
    """PhysicsParameter model for simulation parameters"""
    __tablename__ = 'physics_parameters'

    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    name = Column(String(100), nullable=False)
    description = Column(Text, nullable=True)

    # Foreign key relationships
    scene_id = Column(String, ForeignKey('scenes.id'), nullable=False)

    # Parameter values
    value_type = Column(String(50), nullable=False)  # int, float, bool, etc.
    value = Column(JSON, nullable=False)  # Stored as JSON to handle different types

    # Meta information
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())

    # Define relationship to Scene - use string reference to avoid circular imports
    scene = relationship("Scene", back_populates="physics_parameters")

    def __repr__(self):
        return f"<PhysicsParameter {self.name} (id: {self.id})>"
</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">backend/app/models/universe/__init__.py</parameter>
<parameter name="instructions">Update the import order to prevent circular references</parameter>
<parameter name="code_edit">"""Universe models package initialization file"""

# Import all models to ensure they are registered with SQLAlchemy
from app.models.universe.universe import Universe
from app.models.universe.scene import Scene
from app.models.universe.physics_parameter import PhysicsParameter
from app.models.universe.particle import Particle
from app.models.universe.interaction import Interaction

# Export the models
__all__ = [
    'Universe',
    'Scene',
    'PhysicsParameter',
    'Particle',
    'Interaction'
]
</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">backend/app/api/routes/auth.py</parameter>
<parameter name="should_read_entire_file">false</parameter>
<parameter name="start_line_one_indexed">290</parameter>
<parameter name="end_line_one_indexed_inclusive">350</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">backend/app/api/routes/auth.py</parameter>
<parameter name="instructions">Fix the demo login implementation to handle errors gracefully</parameter>
<parameter name="code_edit">// ... existing code ...

@auth_bp.route('/demo-login', methods=['POST'])
def demo_login():
    """
    Demo user login endpoint.
    Creates a demo user if it doesn't exist, then logs in.
    """
    try:
        # Check if demo user already exists
        demo_user = db.query(User).filter_by(email='demo@example.com').first()

        # If demo user doesn't exist, create one
        if not demo_user:
            # Create demo user
            demo_user = User(
                username="demo_user",
                email="demo@example.com",
                full_name="Demo User",
                is_active=True,
                is_demo=True,
                created_at=func.now(),
                updated_at=func.now()
            )

            # Set a secure password for the demo user
            demo_user.set_password("demo_password")

            # Add to database
            db.add(demo_user)
            db.commit()

            # Create a default universe for the demo user
            create_demo_content(demo_user)

        # Generate access token for the demo user
        access_token = create_access_token(identity=demo_user.id)
        refresh_token = create_refresh_token(identity=demo_user.id)

        # Return tokens
        return jsonify({
            "access_token": access_token,
            "refresh_token": refresh_token,
            "user": demo_user.to_dict()
        }), 200

    except Exception as e:
        db.rollback()
        current_app.logger.error(f"Demo login error: {str(e)}")
        return jsonify({"error": "Demo login failed. Please try again."}), 500

def create_demo_content(user):
    """Create demo content for a new demo user"""
    try:
        # Create a default universe
        universe = Universe(
            name="Demo Universe",
            description="A demo universe with sample content",
            user_id=user.id,
            is_public=True
        )
        db.add(universe)
        db.flush()  # Flush to get the universe ID

        # Create a default scene
        scene = Scene(
            name="Demo Scene",
            description="A starter scene with basic physics",
            user_id=user.id,
            universe_id=universe.id,
            settings={"background": "#000000", "grid": True}
        )
        db.add(scene)
        db.flush()  # Flush to get the scene ID

        # Create default physics parameters
        gravity = PhysicsParameter(
            name="Gravity",
            description="Gravitational constant",
            scene_id=scene.id,
            value_type="float",
            value=9.8
        )
        db.add(gravity)

        db.commit()
    except Exception as e:
        db.rollback()
        current_app.logger.error(f"Error creating demo content: {str(e)}")
        # Even if demo content creation fails, we'll still have the user

// ... existing code ...
</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">frontend/src/features/auth/authSlice.js</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">100</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">frontend/src/features/auth/authSlice.js</parameter>
<parameter name="instructions">Fix token storage and authentication state management</parameter>
<parameter name="code_edit">// ... existing code ...

// Helper function to save tokens to localStorage
const saveTokens = (access_token, refresh_token) => {
  localStorage.setItem('access_token', access_token);
  localStorage.setItem('refresh_token', refresh_token);
};

// Helper function to remove tokens from localStorage
const removeTokens = () => {
  localStorage.removeItem('access_token');
  localStorage.removeItem('refresh_token');
};

// Login thunk action
export const login = createAsyncThunk(
  'auth/login',
  async (credentials, { rejectWithValue }) => {
    try {
      const response = await api.post('/api/auth/login', credentials);
      const { access_token, refresh_token, user } = response.data;

      // Save tokens to localStorage
      saveTokens(access_token, refresh_token);

      return { user, isAuthenticated: true };
    } catch (error) {
      return rejectWithValue(
        error.response?.data?.error || 'Failed to login. Please try again.'
      );
    }
  }
);

// Demo login thunk action
export const demoLogin = createAsyncThunk(
  'auth/demoLogin',
  async (_, { rejectWithValue }) => {
    try {
      const response = await api.post('/api/auth/demo-login');
      const { access_token, refresh_token, user } = response.data;

      // Save tokens to localStorage
      saveTokens(access_token, refresh_token);

      return { user, isAuthenticated: true };
    } catch (error) {
      return rejectWithValue(
        error.response?.data?.error || 'Failed to login with demo account. Please try again.'
      );
    }
  }
);

// Register thunk action
export const register = createAsyncThunk(
  'auth/register',
  async (userData, { rejectWithValue }) => {
    try {
      const response = await api.post('/api/auth/register', userData);
      const { access_token, refresh_token, user } = response.data;

      // Save tokens to localStorage
      saveTokens(access_token, refresh_token);

      return { user, isAuthenticated: true };
    } catch (error) {
      return rejectWithValue(
        error.response?.data?.error || 'Failed to register. Please try again.'
      );
    }
  }
);

// Logout thunk action
export const logout = createAsyncThunk('auth/logout', async () => {
  // Remove tokens from localStorage
  removeTokens();
  return { isAuthenticated: false, user: null };
});

// Check authentication status on app load
export const checkAuth = createAsyncThunk(
  'auth/checkAuth',
  async (_, { rejectWithValue }) => {
    try {
      const token = localStorage.getItem('access_token');

      if (!token) {
        return { isAuthenticated: false, user: null };
      }

      // Verify token and get user info
      const response = await api.get('/api/auth/me');
      return { user: response.data, isAuthenticated: true };
    } catch (error) {
      // Remove invalid tokens
      removeTokens();
      return { isAuthenticated: false, user: null };
    }
  }
);

// ... existing code ...
</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">frontend/src/utils/api.js</parameter>
<parameter name="instructions">Fix API configuration to properly include auth tokens</parameter>
<parameter name="code_edit">import axios from 'axios';

// Create axios instance with base config
const api = axios.create({
  baseURL: '',  // Empty baseURL to work with both relative and absolute URLs
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 30000, // 30 seconds timeout
});

// Request interceptor for API calls
api.interceptors.request.use(
  (config) => {
    // Get the token from localStorage
    const token = localStorage.getItem('access_token');

    // If token exists, add to headers
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    // Console log for debugging in development
    if (process.env.NODE_ENV === 'development') {
      console.log(`Sending Request to the Target: ${config.method.toUpperCase()} ${config.url}`);
    }

    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor for API calls
api.interceptors.response.use(
  (response) => {
    // Console log for debugging in development
    if (process.env.NODE_ENV === 'development') {
      console.log(`Received Response from the Target: ${response.status} ${response.config.url}`);
    }

    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    // Console log error response in development
    if (process.env.NODE_ENV === 'development') {
      if (error.response) {
        console.log(`Received Error Response: ${error.response.status} ${originalRequest.url}`);
      } else {
        console.log(`Request Error: ${error.message}`);
      }
    }

    // Handle 401 errors - token might be expired
    if (error.response && error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        // Try to refresh token
        const refreshToken = localStorage.getItem('refresh_token');

        if (refreshToken) {
          const refreshResponse = await axios.post('/api/auth/refresh-token', {
            refresh_token: refreshToken
          });

          // Save new token
          const { access_token } = refreshResponse.data;
          localStorage.setItem('access_token', access_token);

          // Update authorization header
          originalRequest.headers.Authorization = `Bearer ${access_token}`;
          return axios(originalRequest);
        }
      } catch (refreshError) {
        // If refresh fails, redirect to login
        localStorage.removeItem('access_token');
        localStorage.removeItem('refresh_token');

        // Only redirect if we're not already on the login page
        if (window.location.pathname !== '/login') {
          window.location.href = '/login';
        }
      }
    }

    return Promise.reject(error);
  }
);

export default api;
</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">frontend/src/App.jsx</parameter>
<parameter name="instructions">Add ThemeProvider to the provider hierarchy</parameter>
<parameter name="code_edit">import React, { Suspense, useEffect } from 'react';
import { Provider } from 'react-redux';
import { HashRouter } from 'react-router-dom';
import { ConfigProvider } from 'antd';
import store from './store';
import Routes from './routes';
import ModalProvider from './providers/ModalProvider';
import { ThemeProvider } from './contexts/ThemeContext';
import './styles/global.css';

// Lazy load components for better performance
const AppLoader = () => (
  <div className="app-loader">
    <div className="spinner"></div>
    <p>Loading application...</p>
  </div>
);

const App = () => {
  useEffect(() => {
    // Any app initialization logic can go here
    console.log('App initialized');
  }, []);

  return (
    <Provider store={store}>
      <ConfigProvider
        theme={{
          token: {
            colorPrimary: '#1890ff',
          },
        }}
      >
        <HashRouter>
          <ThemeProvider>
            <ModalProvider>
              <Suspense fallback={<AppLoader />}>
                <Routes />
              </Suspense>
            </ModalProvider>
          </ThemeProvider>
        </HashRouter>
      </ConfigProvider>
    </Provider>
  );
};

export default App;
</parameter>
</invoke>

<invoke name="file_search">
<parameter name="query">vite.config</parameter>
<parameter name="explanation">Looking for the Vite configuration file to check proxy settings</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">frontend/vite.config.js</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">100</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">frontend/vite.config.js</parameter>
<parameter name="instructions">Add proxy configuration to forward API requests to the backend server running on port 8000</parameter>
<parameter name="code_edit">import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  server: {
    port: 5173,
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        secure: false,
        rewrite: (path) => path
      }
    }
  }
})
</parameter>
</invoke>
